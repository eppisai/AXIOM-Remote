#include "Histograms.h"

#include "../MenuDefinitions.h"
#include "../ButtonDefinitions.h"

#include "../../../Bootloader/Periphery/USB/IUSBDevice.h"
#include "../IMenuSystem.h"

#include "../../GlobalSettings.h"

# define my_sizeof(type) ((char *)(&type+1)-(char*)(&type)) 

HistogramsScreen::HistogramsScreen(IUSBDevice* usbDevice) :
    IScreen(usbDevice), _cancelButton("Cancel"), _addPresetButton("Add"), _setButton("Set")
{
 

}

void HistogramsScreen::Draw(IPainter* painter)
{
    Drawheader(painter);
    Drawcartesianplane(painter,20,40);
    uint8_t data[] = {0x3C, 0xC9, 0x3F, 0x3E, 0xC1, 0x77, 0x03, 0x00, 0xC0, 0x03, 0x00, 0xC0, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0xC0, 0x0E, 0x00, 0x60, 0xFC, 0xFF, 0x3F,0x3C, 0xC9, 0x3F, 0x3E, 0xC1, 0x77, 0x03, 0x00, 0xC0, 0x03, 0x00, 0xC0, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0xC0, 0x0E, 0x00, 0x60, 0xFC, 0xFF, 0x3F,0x03, 0x00, 0xC0, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x3E, 0xC1, 0x77, 0x03, 0x00, 0xC0, 0x03, 0x00, 0xC0, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0xC0, 0x0E, 0x00, 0x60, 0xFC, 0xFF, 0x3F,0x3C, 0xC9, 0x3F, 0x3E, 0xC1, 0x77, 0x03, 0x00, 0xC0, 0x03, 0x00, 0xC0, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0xC0, 0x0E, 0x00, 0x60, 0xFC, 0xFF, 0x3F,0x03, 0x00, 0xC0, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0x80, };
    DrawBaseData(data,painter,20,40);
}



void HistogramsScreen::Drawcartesianplane(IPainter* painter,int origin_x,int origin_y){
    painter->DrawFastVLine(origin_x, origin_y, 180, (uint16_t)Color565::Black);
    painter->DrawFastHLine(origin_x, origin_y + 180, origin_x + 250, (uint16_t)Color565::Black);
}

void HistogramsScreen::DrawBaseData(uint8_t data[],IPainter* painter,int origin_x,int origin_y){
  int x_width = 250,y_width = 180,index = 0;
  int size = my_sizeof(data)/my_sizeof(data[0]);
  int interval = (size > x_width) ? size/x_width : 1;
  interval = (size%x_width > 0) ? interval + 1 : interval;
  int hist[251] = {8},high_y = 0;
  for(int i  = 0; i < size; i+=interval){
    int avg = 0;
    for(int j = i; j < size && j <= i + interval; j++) avg += (int)data[j];
    avg = (i+interval < x_width) ? (avg/interval) : (avg/(size%x_width));
    hist[index++] = avg;
    high_y = (avg>high_y) ? avg : high_y;
  }
  if(high_y > y_width){
   interval = high_y/y_width;
    interval = (high_y%y_width > 0) ? interval + 1 : interval;
   for(int i  = 0; i < 170; i++){
    hist[i] =  (hist[i]/interval);
   }
  }
  for(int i = 0; i < 170; i++){
       painter->DrawPixel((uint16_t)(origin_x+i+1),(uint16_t)(origin_y + 179 - hist[i]),(uint16_t)Color565::Red);
  }
//   for(uint16_t i = 1; i < index; i++){
//       for(uint16_t j = origin_y + 179 - hist[i];j <= origin_y + 179;j++)
//          painter->DrawPixel(origin_x+i,j,(uint16_t)Color565::Red);
//   }  



//    for(uint16_t i = 0; i < 169; i++){
//          painter->DrawFillRectangle(origin_x+i+1,origin_y+180-hist[i],60,hist[i],(uint16_t)Color565::Red);
//   } 
}

void HistogramsScreen::Drawheader(IPainter* painter)
{
    // header background
    painter->DrawFillRectangle(0, 0, GlobalSettings::LCDWidth, 30, (uint16_t)Color565::Black);

    //  header title
    painter->SetFont(Font::FreeSans12pt7b);
    painter->DrawText(86, 22, "Graphs", (uint16_t)Color565::White, TextAlign::TEXT_ALIGN_LEFT, 0);

    // header separation lines
    painter->DrawLine(0, 29, GlobalSettings::LCDWidth - 1, 29, (uint16_t)Color565::AXIOM_Orange);
}